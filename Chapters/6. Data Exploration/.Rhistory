knitr::opts_chunk$set(echo = TRUE)
# Clean the environment
rm(list = ls())
x <- c(1,2,3,4,NA)
print(x)
is.na(x)
table(is.na(x))
x <- na.omit(x)
x
# The first line of the output consists of all cases that are not NA
# However, the output also consists of additional information such as the positions of the deleted values and the class.
# To get rid of these attributes, you can simply use the as.numeric function
x <- as.numeric(na.omit(x))
x
knitr::opts_chunk$set(echo = TRUE)
# Clean the environment
rm(list = ls())
x <- c(1,2,3,4,NA)
print(x)
is.na(x)
table(is.na(x))
x <- na.omit(x)
x
x <- as.numeric(na.omit(x))
x
# Regenerate x object as it has been updated by the previous R chunk.
x <- c(1,2,3,4,NA)
min(x)
max(x)
mean(x)
var(x)
# Exclude missing values from analysis: Listwise Deletion
min(x, na.rm = TRUE)
max(x, na.rm = TRUE)
mean(x, na.rm = TRUE)
var(x, na.rm = TRUE)
print(x)
x[is.na(x)] <- mean(x, na.rm=TRUE)
print(x)
x[is.na(x)] <- mean(x)
print(x)
knitr::opts_chunk$set(echo = TRUE)
# Clean the environment
rm(list = ls())
x <- c(1,2,3,4,NA)
print(x)
is.na(x)
table(is.na(x))
x <- na.omit(x)
x
# The first line of the output consists of all cases that are not NA
# However, the output also consists of additional information such as the positions of the deleted values and the class.
# To get rid of these attributes, you can simply use the as.numeric function
x <- as.numeric(na.omit(x))
x
# Regenerate x object as it has been updated by the previous R chunk.
x <- c(1,2,3,4,NA)
min(x)
max(x)
mean(x)
var(x)
# Exclude missing values from analysis: Listwise Deletion
min(x, na.rm = TRUE)
max(x, na.rm = TRUE)
mean(x, na.rm = TRUE)
var(x, na.rm = TRUE)
print(x)
x[is.na(x)] <- mean(x)
print(x)
mean(x
)
# Regenerate x object as it has been updated by the previous R chunk.
x <- c(1,2,3,4,NA,6,NA )
x[is.na(x)] <- mean(x, na.rm=TRUE)
print(x)
# Regenerate x object as it has been updated by the previous R chunk.
x <- c(1,2,3,4,NA)
knitr::opts_chunk$set(echo = TRUE)
# Clean the environment
rm(list = ls())
x <- c(1,2,3,4,NA)
print(x)
is.na(x)
table(is.na(x))
x <- na.omit(x)
x
# The first line of the output consists of all cases that are not NA
# However, the output also consists of additional information such as the positions of the deleted values and the class.
# To get rid of these attributes, you can simply use the as.numeric function
x <- as.numeric(na.omit(x))
x
# Regenerate x object as it has been updated by the previous R chunk.
x <- c(1,2,3,4,NA)
min(x)
max(x)
mean(x)
var(x)
# Exclude missing values from analysis: Listwise Deletion
min(x, na.rm = TRUE)
max(x, na.rm = TRUE)
mean(x, na.rm = TRUE)
var(x, na.rm = TRUE)
print(x)
x[is.na(x)] <- mean(x, na.rm=TRUE)
print(x)
# Regenerate x object as it has been updated by the previous R chunk.
x <- c(1,2,3,4,NA)
print(x)
# Use dplyr::recode() to replace missing values
library(magrittr)
x %>% dplyr::recode(.missing = mean(., na.rm=TRUE))
# Some missing values may not be correctly recorded
y <- c("a","b","c","d","")
is.na(y)
y[5] <- NA
is.na(y)
# Create a group variable
g <- c(rep("group_1",5),rep("group_2",5))
# Generate two random variables
a <- rnorm(10, mean = 0, sd = 1)
b <- a*0.5 + rnorm(10,mean = 0, sd = 1)
a[4] <- NA
b[7] <- NA
dat <- data.frame(g,a,b)
print(dat)
knitr::opts_chunk$set(echo = TRUE)
# Clean the environment
rm(list = ls())
x <- c(1,2,3,4,NA)
print(x)
is.na(x)
table(is.na(x))
x <- na.omit(x)
x
# The first line of the output consists of all cases that are not NA
# However, the output also consists of additional information such as the positions of the deleted values and the class.
# To get rid of these attributes, you can simply use the as.numeric function
x <- as.numeric(na.omit(x))
x
# Regenerate x object as it has been updated by the previous R chunk.
x <- c(1,2,3,4,NA)
min(x)
max(x)
mean(x)
var(x)
# Exclude missing values from analysis: Listwise Deletion
min(x, na.rm = TRUE)
max(x, na.rm = TRUE)
mean(x, na.rm = TRUE)
var(x, na.rm = TRUE)
print(x)
x[is.na(x)] <- mean(x, na.rm=TRUE)
print(x)
# Regenerate x object as it has been updated by the previous R chunk.
x <- c(1,2,3,4,NA)
print(x)
# Use dplyr::recode() to replace missing values
library(magrittr)
x %>% dplyr::recode(.missing = mean(., na.rm=TRUE))
# Some missing values may not be correctly recorded
y <- c("a","b","c","d","")
is.na(y)
y[5] <- NA
is.na(y)
# Create a group variable
g <- c(rep("group_1",5),rep("group_2",5))
# Generate two random variables
a <- rnorm(10, mean = 0, sd = 1)
b <- a*0.5 + rnorm(10,mean = 0, sd = 1)
a[4] <- NA
b[7] <- NA
dat <- data.frame(g,a,b)
print(dat)
cor(a,b)
cor(a,b, use = "pairwise.complete.obs")
library(dplyr)
# Without specifying missing value handling method
dat %>% group_by(g) %>% summarise(mean(a),mean(b))
# Use parameter na.rm=True in aggreation methods
dat %>% group_by(g) %>% summarise(mean(a, na.rm = TRUE),mean(b, na.rm = TRUE))
# Without specifying missing value handling method
dat %>% group_by(g) %>% summarise(mean(a),mean(b))
# Use parameter na.rm=True in aggreation methods
dat %>% group_by(g) %>% summarise(mean(a, na.rm = TRUE),mean(b, na.rm = TRUE))
# Another way is to remove all missing value observations then summarize data
dat %>% na.omit() %>% group_by(g) %>% summarise(mean(a),mean(b))
knitr::opts_chunk$set(echo = TRUE)
---
title: "Handling NAs"
author: "Cui Zou"
date: "10/13/2019"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
```{r}
rm(list = ls())
rm(list = ls())
**airquality Details**
Daily readings of the following air quality values for May 1, 1973 (a Tuesday) to September 30, 1973.
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
# Load airquality data
data("airquality")
str(airquality)
# Find missing values
is.na(airquality)
# Count missing values
sum(is.na(airquality))
# Or use summary() function
summary(airquality)
# Locate the positions with missing values in selected columns
which(is.na(airquality$Ozone))
which(is.na(airquality$Solar.R))
# Or you can use apply() function to identify all the columns with missing values
list_na <- colnames(airquality)[apply(airquality, 2, anyNA)]
list_na
# Visualize all the missing values
library(naniar)
vis_miss(airquality)
# Count missing values
sum(is.na(airquality))
# Or use summary() function
summary(airquality)
knitr::opts_chunk$set(echo = TRUE)
# Clean the environment
rm(list = ls())
set.seed(1)
x <- rnorm(100)
# Intentionally add 3 outliers
x <- c(x,-3.5, 3.3, 4.1)
plot(x)
# Create boxplot
bp <- boxplot(x)
# Print boxplot object
print(bp)
# Print outliers
bp$out
# Generate 100 random values
set.seed(1)
x <- rnorm(100)
mean(x)
sd(x)
# Intentionally add 3 potential outliers
x <- c(x,-3.5, 3.3, 4.1)
# Calculate mean
mean(x)
# Calculate standard deviation
sd(x)
# Calculate z-score
z <- (x - mean(x))/sd(x)
# Print outliers
x[which(z > 3 | z < -3)]
# Use the iris dataset, ignoring the last (5th) column
dat <- iris[-5]
str(dat)
# Load DMwR package
library(DMwR)
install.packages(dmwr)
install.packages("dmwr")
# Load DMwR package
library(DMwR)
install.packages("DMWR")
# Load DMwR package
library(DMwR)
install.packages("DMwR2")
# Load DMwR package
library(DMwR)
# Load DMwR package
library(DMwR2)
str(dat)
View(dat)
# Call the lofactor() in the DMwR package to calculate local outlier factor score
dat$lof <- lofactor(data = dat, k = 5)
str(dat)
# Load DMwR package
library(DMwR2)
# Call the lofactor() in the DMwR package to calculate local outlier factor score
dat$lof <- lofactor(data = dat, k = 5)
str(dat)
plot(density(dat$lof))
library(magrittr)
outliers <- dat %>% dplyr::arrange(desc(lof)) %>%
head(5)
print(outliers)
dat2 <- dplyr::filter(dat,!dat$lof %in% outliers$lof)
str(dat2)
str(dat)
## In set or not in set judgement
1:4 %in% 1:2
!1:4 %in% 1:2
knitr::opts_chunk$set(echo = TRUE)
# Clean the environment
rm(list = ls())
x <- mtcars$mpg
y <- mtcars$wt
n <- length(x)
x_hat <- mean(x)
y_hat <- mean(y)
sum((x-x_hat)*(y-y_hat))/(n-1)
library(caret)
cov(x,y)
sum((x-x_hat)*(y-y_hat))/(n-1)
x <- mtcars$mpg
y <- mtcars$wt
n <- length(x)
x_hat <- mean(x)
y_hat <- mean(y)
sum((x-x_hat)*(y-y_hat))/(n-1)
# Define a function to calculate covariance
mycov <- function(x,y){
n <- length(x)
x_hat <- mean(x)
y_hat <- mean(y)
sum((x-x_hat)*(y-y_hat))/(n-1)
}
# Call the function
cat("covariance =", mycov(mtcars$mpg,mtcars$wt))
# Another function call
cat("covariance =", mycov(mtcars$hp,mtcars$wt))
# Another function call
cat("covariance =", mycov(mtcars$hp,mtcars$wt))
knitr::opts_chunk$set(echo = TRUE)
# Clean the environment
rm(list = ls())
x <- mtcars$mpg
y <- mtcars$wt
n <- length(x)
x_hat <- mean(x)
y_hat <- mean(y)
sum((x-x_hat)*(y-y_hat))/(n-1)
# Define a function to calculate covariance
mycov <- function(x,y){
n <- length(x)
x_hat <- mean(x)
y_hat <- mean(y)
sum((x-x_hat)*(y-y_hat))/(n-1)
}
# Call the function
cat("covariance =", mycov(mtcars$mpg,mtcars$wt))
# Another function call
cat("covariance =", mycov(mtcars$hp,mtcars$wt))
# Use cov() function to calculate variance
cov(mtcars$mpg,mtcars$wt)
cov(mtcars$hp,mtcars$wt)
# Manually calculate correlation coefficient
cov(mtcars$mpg,mtcars$wt)/(sd(mtcars$mpg)*sd(mtcars$wt))
knitr::opts_chunk$set(echo = TRUE)
# Clean the environment
rm(list = ls())
x <- mtcars$mpg
y <- mtcars$wt
n <- length(x)
x_hat <- mean(x)
y_hat <- mean(y)
sum((x-x_hat)*(y-y_hat))/(n-1)
# Define a function to calculate covariance
mycov <- function(x,y){
n <- length(x)
x_hat <- mean(x)
y_hat <- mean(y)
sum((x-x_hat)*(y-y_hat))/(n-1)
}
# Call the function
cat("covariance =", mycov(mtcars$mpg,mtcars$wt))
# Another function call
cat("covariance =", mycov(mtcars$hp,mtcars$wt))
# Use cov() function to calculate variance
cov(mtcars$mpg,mtcars$wt)
cov(mtcars$hp,mtcars$wt)
# Manually calculate correlation coefficient
cov(mtcars$mpg,mtcars$wt)/(sd(mtcars$mpg)*sd(mtcars$wt))
# Use cor() function to calculate correlation coefficient
cor(mtcars$mpg,mtcars$wt)
cor(mtcars$hp,mtcars$wt)
a <- seq(from = -5, to = 5, by = 0.1)
b <- a^2
plot(a,b)
# Add linear regression line
abline(lm(b~a),col = "red")
cov(a,b)
cor(a,b)
# install.packages("corrplot")
library(corrplot)
corrplot(cor(mtcars), method="number", tl.cex = 1)
corrplot(cor(mtcars), method="ellipse", tl.cex = 1)
library(dplyr)
library(ggplot2)
str(mtcars)
head(mtcars)
df <- select(mtcars, 1, 9)
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am) <- c("Automatic", "Manual")
ggplot(mtcars, aes(x=factor(am),y=mpg,fill=factor(am)))+
geom_boxplot(notch=F)+
scale_x_discrete("Transmission")+
scale_y_continuous("Miles per Gallon")+
ggtitle("MPG by Transmission Type")
autoData <- mtcars[mtcars$am == "Automatic",]
manualData <- mtcars[mtcars$am == "Manual",]
ttest <- t.test(autoData$mpg, manualData$mpg)
ttest
